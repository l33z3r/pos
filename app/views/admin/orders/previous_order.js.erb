//have to construct a json that is compatible with the js code

previousOrderJSON = <%= raw(@order.to_json) %>.order;

var orderItems = [];

<% @order_items.each do |order_item| %>
  var orderItem = <%= raw(order_item.to_json) %>.order_item;
  orderItem.product = <%= raw(order_item.product.to_json) %>.product;

  orderItem.modifier = {'name' : '<%= raw(order_item.modifier_name) %>', 'price' : '<%= raw(order_item.modifier_price) %>'};

  //alias some vars for compatibility
  orderItem.amount = orderItem.quantity;
  orderItem.product_price = orderItem.product.price;

  orderItems.push(orderItem);
<% end %>

//reset the total to be just the sum of all the order items, as the discounts and deductions will be worked out based on that
oldTotal = previousOrderJSON.total;
subTotal = <%= @order_items.sum(:total_price) %>;
previousOrderJSON.total = subTotal;

//cash tendered and change and payment method and service charge
previousOrderJSON.cash_tendered = previousOrderJSON.amount_tendered;

//the change is worked out from the old total which does not include the cashback or service charge
previousOrderJSON.change = previousOrderJSON.cash_tendered - previousOrderJSON.cashback - previousOrderJSON.service_charge - oldTotal;
previousOrderJSON.payment_method = previousOrderJSON.payment_type;

orderDateString = "<%= @order.created_at %>";
x = orderDateString.match(/(\d{4})-(\d{2})-(\d{2})\s(\d{2}):(\d{2}):(\d{2})/);
previousOrderJSON.time = new Date(x[1],x[2]-1,x[3],x[4],x[5]);

<% if @order.is_table_order %>
previousOrderJSON.table = "<%= @order.table_info_label %>";
<% end %>

previousOrderJSON.items = orderItems;

//store the previous order id for voiding purposes
previousOrderJSON.void_order_id = <%= @order.id %>;

parsePreviousOrder(previousOrderJSON);