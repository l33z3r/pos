see: http://www.html5rocks.com/en/tutorials/appcache/beginner/





application controller:

  before_filter :check_reset_cache_timestamp
  
  def check_reset_cache_timestamp
    if params[:reset_cache]
      update_html5_cache_timestamp
    end
  end


home controller: 

# Rails controller action for an HTML5 cache manifest file.
  # Generates a plain text list of files that changes
  # when one of the listed files change...
  # So the client knows when to refresh its cache.
#  def cache_manifest
#    @files = ["CACHE MANIFEST\n"]
#
#    #    @files << '/images/button_logos/clock_in.png'
#    #    @files << '/javascripts/cache/large_screen.js'
#    #    @files << '/javascripts/cache/large_screen.js'
#    
#    @all_images = Dir.glob("#{Rails.root}/public/images/**/*") | Dir.glob("#{Rails.root}/public/system/**/*")
#    
#    @all_images.each do |rb_file|
#      next if !rb_file.match /.png$/ and !rb_file.match /.jpg$/ and !rb_file.match /.gif$/
#      
#      #escape whitespace
#      if rb_file.match /\s+/ 
#        rb_file.gsub!(" ", "%20")
#        rb_file
#      end
#      
#      @files << "#{rb_file[rb_file.rindex("/public/")+7..rb_file.length-1]}"
#      
#    end
#    #    add_from('./public/javascripts/','*.js')
#    #    add_from('./public/stylesheets/','*.css')
#    #    add_from('./client/images/','*.png')
#
#    @files << "\nNETWORK:"
#    @files << '*'
#    
#    digest = Digest::SHA1.new
#    @files.each do |f|
#      actual_file = File.join(Rails.root,'public',f)
#      digest << "##{File.mtime(actual_file)}" if File.exist?(actual_file)
#    end
#    
#    #a digest of all the files
#    @files << "\n# Modification Digest: #{digest.hexdigest}"
#    
#    #a timestamp that we can update from the app to force a reload
#    @modification_timestamp = GlobalSetting.parsed_setting_for GlobalSetting::RELOAD_HTML5_CACHE_TIMESTAMP
#    @files << "\n# Modification Timestamp: #{@modification_timestamp}"
#    
#    
#    render :text => @files.join("\n"), :content_type => 'text/cache-manifest', :layout => nil
#  end


application.js

if(inProdMode()) {
        //start checking for cache updates
        cacheUpdateCheckPoll();
    }

function cacheUpdateCheckPoll() {
    return;
    console.log("Checking for cache update");
    
    try{
        window.applicationCache.update();
    } catch(e){}
    
    setTimeout(cacheUpdateCheckPoll, 5000);
}

layout file:

<!-- only use cache manifest in production mode -->
<html <%= prod ? "manifest='cache_manifest.manifest'" : "" %>>

code for debugging:

<script type="text/javascript">
      var cacheStatusValues = [];
      cacheStatusValues[0] = 'uncached';
      cacheStatusValues[1] = 'idle';
      cacheStatusValues[2] = 'checking';
      cacheStatusValues[3] = 'downloading';
      cacheStatusValues[4] = 'updateready';
      cacheStatusValues[5] = 'obsolete';

      var cache = window.applicationCache;
      cache.addEventListener('cached', logEvent, false);
      cache.addEventListener('checking', logEvent, false);
      cache.addEventListener('downloading', logEvent, false);
      cache.addEventListener('error', logEvent, false);
      cache.addEventListener('noupdate', logEvent, false);
      cache.addEventListener('obsolete', logEvent, false);
      cache.addEventListener('progress', logEvent, false);
      cache.addEventListener('updateready', logEvent, false);

      function logEvent(e) {
        var online, status, type, message;
        online = (navigator.onLine) ? 'yes' : 'no';
        status = cacheStatusValues[cache.status];
        type = e.type;
        message = 'online: ' + online;
        message+= ', event: ' + type;
        message+= ', status: ' + status;
        if (type == 'error' && navigator.onLine) {
          message+= ' (probably a syntax error in manifest)';
        }
        console.log(message);
      }

      window.applicationCache.addEventListener(
      'updateready',
      function(){
        window.applicationCache.swapCache();
        console.log('swap cache has been called');
      },
      false
    );
    </script>